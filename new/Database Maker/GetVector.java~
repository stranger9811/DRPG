import javax.imageio.ImageIO;
import java.util.Scanner;
import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.File;
import java.lang.Object;
import java.lang.*;
import java.io.IOException;
import javax.imageio.ImageIO;
import java.lang.reflect.Field;
import java.lang.reflect.ParameterizedType;
import java.util.ArrayList;
import java.util.List;
import java.lang.Math;
import java.text.DecimalFormat;
public class GetVector {
	private static BufferedImage BinarizedImage;     
	private static int name=1;                                         
	public static void main(String[] args) throws IOException {
		String FileName = args[0];
		File FilePointer = new File(FileName);                                     
		BinarizedImage = ImageIO.read(FilePointer);      
		GetAllCharacter();                                                       
	}
	public static int GetFrame(int[][] Coordinates,int[][] Visited,int Row,int Column)
	{
		if(Row<0||Row>=BinarizedImage.getHeight())
			return 0;
		if(Column<0||Column>=BinarizedImage.getWidth())
			return 0;
		int Pixel=BinarizedImage.getRGB(Column,Row);
		int Red=new Color(Pixel).getRed();
		if(Red==255 || Visited[Row][Column]==1)
		{
			return 0;
		}
		else
		{
			Visited[Row][Column]=1;
			if(Row<Coordinates[1][0])
				Coordinates[1][0]=Row;
			if(Row>Coordinates[1][1])
				Coordinates[1][1]=Row;
			if(Column<Coordinates[0][0])
				Coordinates[0][0]=Column;
			if(Column>Coordinates[0][1])
				Coordinates[0][1]=Column;
			GetFrame(Coordinates,Visited,Row+1,Column+1);
			GetFrame(Coordinates,Visited,Row,Column+1);
			GetFrame(Coordinates,Visited,Row-1,Column+1);
			GetFrame(Coordinates,Visited,Row+1,Column);
			GetFrame(Coordinates,Visited,Row-1,Column);
			GetFrame(Coordinates,Visited,Row+1,Column-1);
			GetFrame(Coordinates,Visited,Row,Column-1);
			GetFrame(Coordinates,Visited,Row-1,Column-1);
		}
		return 0;
	}
	public static int GetAllCharacter()
	{
		int Height=BinarizedImage.getHeight();
		int Width =BinarizedImage.getWidth();
		int[][] Visited= new int[Height][Width];
		int i,j;
		for(i=0; i<Height; i++)
		{
			for(j=0; j<Width; j++)
			{
				Visited[i][j]=0;
			}
		}
		for(i=0; i<Height; i++)
		{
			for(j=0; j<Width; j++)
			{
				int Pixel=BinarizedImage.getRGB(j,i);
				int Red=new Color(Pixel).getRed();
				int[][] Coordinates=new int[2][2];
				if((Red==0) && (Visited[i][j]==0))
				{
					Coordinates[0][0]=10000000;Coordinates[0][1]=-10000000;
					Coordinates[1][0]=10000000;Coordinates[1][1]=-10000000;
					GetFrame(Coordinates,Visited,i,j);
					//for(int q=0; q<2; q++)
					//System.out.println(Coordinates[q][0]+" "+Coordinates[q][1]);
					BufferedImage ChracterImage = new BufferedImage(Coordinates[0][1]-Coordinates[0][0]+1, Coordinates[1][1]-Coordinates[1][0]+1, BinarizedImage.getType());

					for(int x=Coordinates[0][0]; x<=Coordinates[0][1]; x++)
					{
						for(int y=Coordinates[1][0]; y<=Coordinates[1][1]; y++)
						{
							int newpixel=BinarizedImage.getRGB(x,y);   
							ChracterImage.setRGB(x-Coordinates[0][0],y-Coordinates[1][0],newpixel);
						}       
					}
					vector(ChracterImage);
					writeImage(ChracterImage,Integer.toString(name));
					name++;
				}
			}
		}
		return 0;
	}
	public static int vector(BufferedImage image){

		int width = image.getWidth();
		int height = image.getHeight();
		double[] t = new double[8];
		int [][] v = new int[8][2];
		int i,j,pixel;
		int Xs=0,Ys=0,count=0;;

		for(i=0;i<width;i++) {
			for(j=0;j<height;j++)
			{
				pixel = new Color(image.getRGB(i, j)).getRed();
				if(pixel == 0)
				{
					Xs = Xs + i;
					Ys = Ys + j;
					count = count + 1;
				}
			}
		}
		Xs = Xs/count;
		Ys = Ys/count;
		for(i=0;i<8;i++)
		{
			v[i][0]=Xs;
			v[i][1]=Ys;
		}
		i=Xs;j=Ys;
		while(i < width && i>=0 && j < height && j>=0)
		{
			if((new Color(image.getRGB(i, j)).getRed()==0) && i>v[0][0] )
				v[0][0] = i;
			i++;
		}
		i=Xs;j=Ys;
		while(i < width && i>=0 && j < height && j>=0)
		{
			if((new Color(image.getRGB(i, j)).getRed()==0) && i<v[4][0] )
				v[4][0] = i;
			i--;
		}
		i=Xs;j=Ys;
		while(i < width && i>=0 && j < height && j>=0)
		{
			if((new Color(image.getRGB(i, j)).getRed()==0) && j<v[2][1] )
				v[2][1] = i;
			j--;
		}
		i=Xs;j=Ys;
		while(i < width && i>=0 && j < height && j>=0)
		{
			if((new Color(image.getRGB(i, j)).getRed()==0) && j>v[6][1] )
				v[6][1] = i;
			j++;
		}
		i=Xs;j=Ys;
		while(i < width && i>=0 && j < height && j>=0)
		{
			if((new Color(image.getRGB(i, j)).getRed()==0) && j>v[7][1] )
			{
				v[7][0] = i;
				v[7][1] = j;
			}
			i++;
			j++;
		}
		i=Xs;j=Ys;
		while(i < width && i>=0 && j < height && j>=0)
		{
			if((new Color(image.getRGB(i, j)).getRed()==0) && j<v[1][1] )
			{
				v[1][0] = i;
				v[1][1] = j;
			}
			i++;
			j--;
		}
		i=Xs;j=Ys;
		while(i < width && i>=0 && j < height && j>=0)
		{
			if((new Color(image.getRGB(i, j)).getRed()==0) && j<v[3][1] )
			{
				v[3][0] = i;
				v[3][1] = j;
			}
			i--;
			j--;
		}
		i=Xs;j=Ys;
		while(i < width && i>=0 && j < height && j>=0)
		{
		
			if((new Color((int)image.getRGB(i, j)).getRed()==0) && j>v[5][1] )
			{
				v[5][0] = i;
				v[5][1] = j;
			}
			i--;
			j++;
		}
		for(i=0;i<8;i++){
			t[i] = Math.pow((v[i][0]-Xs),2) + Math.pow((v[i][1]-Ys),2);
			t[i] = Math.sqrt(t[i]);
		}
		System.out.print(name+"\t");
		DecimalFormat df=new DecimalFormat("#.###");
		for(i=0; i<8; i++)
			System.out.print(df.format(t[i])+"\t");
		System.out.println();
		return 0;
	}
	private static void writeImage(BufferedImage image,String output) {
		File file = new File(output+".bmp");
		try {
			ImageIO.write(image, "bmp", file);
		}catch(IOException e) {
			System.out.println("Not worked");
		}
		finally {
			//System.out.println("Works fine");
		}

	}
	
}

